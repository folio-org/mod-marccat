package org.folio.marccat.dao.persistence;

import net.sf.hibernate.CallbackException;
import net.sf.hibernate.Session;
import org.folio.marccat.business.common.PersistenceState;
import org.folio.marccat.business.common.PersistentObjectWithView;
import org.folio.marccat.business.common.UserViewHelper;
import org.folio.marccat.config.log.Log;
import org.folio.marccat.dao.AbstractDAO;
import org.folio.marccat.dao.DescriptorDAO;
import org.folio.marccat.dao.PublTagDAO;
import org.folio.marccat.dao.PublisherDescriptorDAO;
import org.folio.marccat.exception.DataAccessException;
import org.folio.marccat.util.StringText;

import java.io.Serializable;

/**
 * Descriptor class for PUBL_TAG.
 *
 * @since 1.0
 */
public class PUBL_TAG implements Serializable, PersistentObjectWithView {

  private static final long serialVersionUID = 1L;
  private static Log logger = new Log(PUBL_TAG.class);
  private final PublTagDAO theDAO = new PublTagDAO();
  private final DescriptorDAO thePublisherDescriptor = new PublisherDescriptorDAO();
  private int publisherTagNumber = -1;
  private PersistenceState persistence = new PersistenceState();
  private UserViewHelper uvh = new UserViewHelper();
  private int sequenceNumber;
  private PUBL_HDG descriptor = new PUBL_HDG();
  private String otherSubfields;
  private Integer publisherHeadingNumber;

  public String toString() {
    return "PUBL_TAG(" + getPublisherTagNumber() + ", "
      + getUserViewString() + ", " + getPublisherHeadingNumber()
      + ", " + getSequenceNumber() + ", " + getOtherSubfields() + ")";
  }



  public DescriptorDAO getDescriptorDAO() {
    return thePublisherDescriptor;
  }

  public void generateNewKey() throws DataAccessException {
    logger.error("PUBL_TAG keys are generated by the owning PublisherTagDescriptor");
    throw new IllegalArgumentException();
  }

  /**
   * @return descriptor stringText
   */
  public String getStringText() {
    final StringBuilder builder = new StringBuilder();
    builder.append(new StringText(getOtherSubfields()).getSubfieldsWithCodes("368").toString())
      .append((getDescriptor() != null) ? getDescriptor().getStringText() : "")
      .append(new StringText(getOtherSubfields()).getSubfieldsWithoutCodes("368").toString());

    return builder.toString();
  }

  /**
   * @param stringText
   */
  public void setStringText(String stringText) {
    StringText s = new StringText(stringText);
    getDescriptor().setStringText(s.getSubfieldsWithoutCodes("cefg").toString());
    setOtherSubfields(s.getSubfieldsWithCodes("cefg").toString());
  }

  public boolean equals(Object arg0) {
    if (arg0 instanceof PUBL_TAG) {
      PUBL_TAG obj = (PUBL_TAG) arg0;
      return this.getPublisherTagNumber() == obj.getPublisherTagNumber()
        && this.getUserViewString().equals(obj.getUserViewString())
        && this.getSequenceNumber() == obj.getSequenceNumber();
    }
    return false;
  }

  public AbstractDAO getDAO() {
    return theDAO;
  }

  /**
   * @return the content of subfield c.
   * @since 1.0
   */
  public String getDate() {
    return new StringText(getOtherSubfields()).getSubfieldsWithCodes("c").toDisplayString();
  }

  public PUBL_HDG getDescriptor() {
    return descriptor;
  }

  public void setDescriptor(final PUBL_HDG heading) {
    this.descriptor = heading;
    if (heading != null) {
      setPublisherHeadingNumber((heading.getHeadingNumber()));
    }
  }

  public String getOtherSubfields() {
    return otherSubfields;
  }

  public void setOtherSubfields(final String otherSubfields) {
    this.otherSubfields = otherSubfields;
  }

  public Integer getPublisherHeadingNumber() {
    return publisherHeadingNumber;
  }

  public void setPublisherHeadingNumber(final Integer publisherHeadingNumber) {
    this.publisherHeadingNumber = publisherHeadingNumber;
  }

  public int getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(final int sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }

  public int hashCode() {
    return getPublisherTagNumber() * getSequenceNumber();
  }


  public int getUpdateStatus() {
    return persistence.getUpdateStatus();
  }

  public void setUpdateStatus(int i) {
    persistence.setUpdateStatus(i);
  }

  public boolean isChanged() {
    return persistence.isChanged();
  }

  public boolean isDeleted() {
    return persistence.isDeleted();
  }

  public boolean isNew() {
    return persistence.isNew();
  }

  public boolean isRemoved() {
    return persistence.isRemoved();
  }

  public void markChanged() {
    persistence.markChanged();
  }

  public void markDeleted() {
    persistence.markDeleted();
  }

  public void markNew() {
    persistence.markNew();
  }

  public void markUnchanged() {
    persistence.markUnchanged();
  }

  public boolean onDelete(Session arg0) throws CallbackException {
    return persistence.onDelete(arg0);
  }

  public void onLoad(Session arg0, Serializable arg1) {
    persistence.onLoad(arg0, arg1);
  }

  public boolean onSave(Session arg0) throws CallbackException {
    return persistence.onSave(arg0);
  }

  public boolean onUpdate(Session arg0) throws CallbackException {
    return persistence.onUpdate(arg0);
  }

  public String getUserViewString() {
    return uvh.getUserViewString();
  }

  public void setUserViewString(String string) {
    uvh.setUserViewString(string);
  }

  public int getPublisherTagNumber() {
    return publisherTagNumber;
  }

  public void setPublisherTagNumber(int publisherTagNumber) {
    this.publisherTagNumber = publisherTagNumber;
  }

}
