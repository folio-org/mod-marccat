package org.folio.marccat.config.constants;

import net.sf.hibernate.cfg.Configuration;
import org.folio.marccat.dao.*;
import org.folio.marccat.dao.persistence.*;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Global constants.
 *
 * @description: With "Global" we mean a constant that
 *
 * <ul>
 * <li>is supposed to be shared at least between 2 modules.</li>
 * <li>needs to be used within this "shared" module</li>
 * </ul>
 */
public abstract class Global {

  public static final String BASE_URI = "marccat";
  public static final String MODULE_NAME = "MARCCAT";
  public static final String MODULE_MARCCAT = "mod-marccat";
  public static final String OKAPI_TENANT_HEADER_NAME = "X-Okapi-Tenant";
  public static final String OKAPI_URL = "X-Okapi-Url";
  public static final String OKAPI_TO_URL = "X-Okapi-Url-to";
  public static final String OKAPI_TOKEN_HEADER_NAME = "X-Okapi-Token";
   public static final String EMPTY_STRING = "";
  public static final String EMPTY_VALUE = " ";
  public static final String SUBFIELD_DELIMITER_FOR_VIEW = "\\$";
  public static final String MAP_CODE = "a";
  public static final String ELECTRONIC_RESOURCE = "c";
  public static final String GLOBE = "d";
  public static final String TACTILE_MATERIAL = "f";
  public static final String PROJECTED_GRAPHIC = "g";
  public static final String MICROFORM = "h";
  public static final String NON_PROJECTED_GRAPHIC = "k";
  public static final String MOTION_PICTURE = "m";
  public static final String KIT_CODE = "o";
  public static final String NOTATED_MUSIC = "q";
  public static final String REMOTE_SENSING_IMAGE = "r";
  public static final String SOUND_RECORDING = "s";
  public static final String TEXT_CODE = "t";
  public static final String VIDEO_RECORDING = "v";
  public static final String UNSPECIFIED = "z";
  public static final String HEADER_TYPE_LABEL = "HEADER_TYPE";
  public static final String FORM_OF_MATERIAL_LABEL = "FORM_OF_MATERIAL";
  public static final String MATERIAL_TYPE_CODE_LABEL = "MATERIAL_TYPE_CODE";
  public static final String LEADER_TAG_NUMBER = "000";
  public static final String CONTROL_NUMBER_TAG_CODE = "001";
  public static final String CATALOGING_SOURCE_TAG_CODE = "040";
  public static final String DATETIME_TRANSACTION_TAG_CODE = "005";
  public static final String OTHER_MATERIAL_TAG_CODE = "006";
  public static final String PHYSICAL_DESCRIPTION_TAG_CODE = "007";
  public static final int MATERIAL_FIELD_LENGTH = 40;
  public static final int OTHER_MATERIAL_FIELD_LENGTH = 18;
  public static final String ITEM_DATE_FIRST_PUBLICATION = "    ";
  public static final String ITEM_DATE_LAST_PUBLICATION = "    ";
  public static final String MATERIAL_TAG_CODE = "008";
  public static final int INT_CATEGORY = 1;
  public static final int PHYSICAL_UNSPECIFIED_HEADER_TYPE = 45;
  public static final int LEADER_LENGTH = 24;
  public static final DecimalFormat DECIMAL_FORMAT_AN = new DecimalFormat("000000000000");
  public static final String BOOKFORM_OF_MATERIAL = "bk";
  public static final String LOADING_FILE_FILENAME = "filename";
  public static final String LOADING_FILE_IDS = "ids";
  public static final String LOADING_FILE_REJECTED = "rejected";
  public static final String LOADING_FILE_ADDED = "added";
  public static final String LOADING_FILE_ERRORS = "errors";
  public static final String AN_KEY_CODE_FIELD = "BI";
  public static final String ERROR_MANDATORY_TAG = "-1";
  public static final String ERROR_DUPLICATE_TAG = "-2";
  public static final String ERROR_EMPTY_TAG = "-3";
  public static final String NO_RECORD_FOUND = "-4";
  public static final String NO_TAG_FOUND = "-5";
  public static final Map<String, String> ERRORS_MAP = new HashMap<>();
  public static final int TAG_RELATION_MIN = 760;
  public static final int TAG_RELATION_MAX = 787;
  public static final int DATETIME_TRANSACTION_HEADER_TYPE = 41;
  public static final short CORRELATION_UNDEFINED = -1;
  public static final int CATALOGING_SOURCE_HEADER_TYPE = 1;
  public static final int LEADER_HEADER_TYPE = 15;
  public static final int CONTROL_NUMBER_HEADER_TYPE = 39;
  public static final int DATETIME_TRANSACION_HEADER_TYPE = 41;
  public static final int MATERIAL_DESCRIPTION_HEADER_TYPE = 31;
  public static final String FIXED_LEADER_LENGTH = "00000";
  public static final char RECORD_STATUS_CODE = 'n';
  public static final char RECORD_TYPE_CODE = 'a';
  public static final char BIBLIOGRAPHIC_LEVEL_CODE = 'm';
  public static final char CONTROL_TYPE_CODE = ' ';
  public static final char CHARACTER_CODING_SCHEME_CODE = ' ';
  public static final String FIXED_LEADER_BASE_ADDRESS = "2200000";
  public static final char ENCODING_LEVEL = ' ';
  public static final char DESCRIPTIVE_CATALOGUING_CODE = ' ';
  public static final char LINKED_RECORD_CODE = ' ';
  public static final String FIXED_LEADER_PORTION = "4500";
  public static final Map<Integer, String> PHYSICAL_TYPES_MAP = new HashMap<>();
  public static final int HEADER_CATEGORY = 1;
  public static final int NAME_CATEGORY = 2;
  public static final int TITLE_CATEGORY = 3;
  public static final int SUBJECT_CATEGORY = 4;
  public static final int CONTROL_NUMBER_CATEGORY = 5;
  public static final int CLASSIFICATION_CATEGORY = 6;
  public static final int PUBLISHER_CATEGORY = 7;
  public static final int BIB_NOTE_CATEGORY = 7;
  public static final int NAME_TITLE_CATEGORY = 11;
  public static final int RELATION_CATEGORY = 8;
  public static final String TITLE_REQUIRED_PERMISSION = "editTitle";
  public static final String NAME_REQUIRED_PERMISSION = "editName";
  public static final String CNTL_NBR_REQUIRED_PERMISSION = "editControlNumber";
  public static final String PUBLISHER_REQUIRED_PERMISSION = "editNotes";
  public static final String CLASSIFICATION_REQUIRED_PERMISSION = "editClassNumber";
  public static final String SUBJECT_REQUIRED_PERMISSION = "editSubject";
  public static final String NOTE_REQUIRED_PERMISSION = "editNote";
  public static final String TITLE_VARIANT_CODES = "3civ5";
  public static final String TITLE_ISSN_SERIES_SUBFIELD_CODE = "x";
  public static final String TITLE_VOLUME_SUBFIELD_CODE = "v";
  public static final String NAME_VARIANT_SUBFIELD_CODES = "3eiuox45";
  public static final String NAME_TITLE_INSTITUTION_SUBFIELD_CODE = "5";
  public static final String WORK_REL_SUBFIELD_CODE = "4";
  public static final int PUBLISHER_DEFAULT_NOTE_TYPE = 24;
  public static final String PUBLISHER_FAST_PRINTER_SUBFIELD_CODES = "368efg";
  public static final String PUBLISHER_VARIANT_CODES = "368cefg";
  public static final String PUBLISHER_OTHER_SUBFIELD_CODES = "cefg";
  public static final List<Integer> PUBLISHER_CODES = Arrays.asList(24, 381, 382, 410, 411, 412, 413, 414, 415,
    416, 417, 418, 419, 420, 421, 422, 423, 424);
  public static final int DEWEY_TYPE_CODE = 12;
  public static final String SUBJECT_VARIANT_CODES = "34eu";
  public static final String SUBJECT_WORK_REL_STRING_TEXT_SUBFIELD_CODES = "eu";
  public static final int STANDARD_NOTE_MAX_LENGHT = 1024;
  public static final int OVERFLOW_NOTE_MAX_LENGHT = 1000;
  public static final String NAME_TITLE_VARIANT_CODES = "3v5";
  public static final Map<String, Class> MAP_CODE_LISTS = new HashMap<>();
  public static final Map<String, Class> BIBLIOGRAPHIC_ACCESS_POINT_CLASS_MAP = new HashMap<>();
  public static final Map<String, String> INDEX_AUTHORITY_TYPE_MAP = new HashMap<>();
  public static final Map<String, Class> DAO_CLASS_MAP = new HashMap<>();
  public static final Map<String, String> FILTER_MAP = new HashMap<>();
  public static final String SPECIFIC_MATERIAL_DESIGNAION_ON_CODE = "specificMaterialDesignationCode";
  public static final String COLOR_CODE = "colorCode";
  public static final String SOUND_ON_MEDIUM_OR_SEPARATE_CODE = "soundOnMediumOrSeparateCode";
  public static final String MEDIUM_FOR_SOUND_CODE = "mediumForSoundCode";
  public static final String DIMENSION_CODE = "dimensionCode";
  public static final String CONFIGURATION_CODE = "configurationCode";
  public static final String POLARITY_CODE = "polarityCode";
  public static final String GOVERNMENT_PUBLICATION_CODE = "governmentPublicationCode";
  public static final String FORM_OF_ITEM_CODE = "formOfItemCode";
  public static final String BOOK_TYPE = "bk";
  public static final String MUSIC_TYPE = "msr";
  public static final String SERIAL_TYPE = "se";
  public static final String MIXED_TYPE = "mm";
  public static final String MAP_TYPE = "cm";
  public static final String VISUAL_TYPE = "vm";
  public static final String COMPUTER_TYPE = "cf";
  public static final int CONTROL_FIELD_CATEGORY_CODE = 1;
  public static final char BIBLIOGRAPHIC_INDICATOR_NOT_NUMERIC = 'S';
  public static final List<String> FIXED_FIELDS = Arrays.asList("000", "001", "005", "006", "007", "008");
  public static final List<String> MANDATORY_FIELDS = Arrays.asList("000", "001", "008", "040");
  public static final List<String> NAMES = Arrays.asList("100", "110", "111");
  public static final List<String> NAMES_D = Arrays.asList("110", "111", "710", "711");
  public static final List<String> NAMES_E = Arrays.asList("100", "110", "120", "121", "240", "243", "400", "410", "600", "610", "700", "710", "720", "721", "800", "810", "900", "910", "980", "981");
  public static final List<String> NAMES_X = Arrays.asList("400", "410", "411", "700", "710", "711", "720", "721", "722", "900", "910", "911", "980", "981", "982");
  public static final List<String> NAMES_V = Arrays.asList("400", "410", "411", "800", "810", "811", "980", "981", "982");
  public static final List<String> NAMES_245 = Arrays.asList("600", "610", "611", "700", "710", "711", "720", "721", "722", "800", "810", "811", "900", "910", "911", "980", "981", "982");
  public static final List<String> SUBJECTS_4 = Arrays.asList("600", "610", "611");
  public static final List<String> SUBJECTS_E = Arrays.asList("600", "610");
  public static final List<String> TITLES_X = Arrays.asList("440", "730", "740", "930", "983");
  public static final List<String> TITLES_V = Arrays.asList("440", "830", "983");
  public static final List<String> TITLES = Arrays.asList("130", "241", "245", "730", "740", "830", "930", "941", "945", "983");
  public static final String TERMINAL_PUNCTUATION = ".?!)-";
  public static final String OTHER_TERMINAL_PUNCTUATION = ".?!)]-";
  public static final String SUBFIELD_DELIMITER = "\u001f";
  public static final Configuration HCONFIGURATION = new Configuration();
  public static final Map<String, String> TAGS = new HashMap<>();
  private static final String UNASSIGNED = "unassigned";
  private static final String TAG_9XX = "9XX";
  public static final List<String> SKIP_IN_FILING_CODES = Arrays.asList("0","1","2","3","4","5","6","7","8","9");
  public static final String MODULE_CONFIGURATION = "mod-configuration";
  public static final String SUB_PATH_CONFIGURATION = "/configurations/entries";
  public static final String UNDEFINED ="und";

  static {
    TAGS.put("001", "Control Number  (NR)");
    TAGS.put("002", UNASSIGNED);
    TAGS.put("003", "Control Number Identifier  (NR)");
    TAGS.put("004", UNASSIGNED);
    TAGS.put("005", "Date and Time of Latest Transaction  (NR)");
    TAGS.put("006", UNASSIGNED);
    TAGS.put("007", UNASSIGNED);
    TAGS.put("008", "Fixed-Length Data Elements  (NR)");
    TAGS.put("009", UNASSIGNED);
    TAGS.put("010", "Library of Congress Control Number  (NR)");
    TAGS.put("011", UNASSIGNED);
    TAGS.put("013", UNASSIGNED);
    TAGS.put("014", "Link to Bibliographic Record for Serial or Multipart Item (R)");
    TAGS.put("015", UNASSIGNED);
    TAGS.put("016", "National Bibliographic Agency Control Number (R)");
    TAGS.put("017", UNASSIGNED);
    TAGS.put("019", UNASSIGNED);
    TAGS.put("020", "International Standard Book Number (R)");
    TAGS.put("021", UNASSIGNED);
    TAGS.put("022", "International Standard Serial Number (R)");
    TAGS.put("023", UNASSIGNED);
    TAGS.put("024", "Other Standard Identifier (R)");
    TAGS.put("025", UNASSIGNED);
    TAGS.put("030", UNASSIGNED);
    TAGS.put("031", "Musical Incipits Information (R)");
    TAGS.put("032", UNASSIGNED);
    TAGS.put("033", UNASSIGNED);
    TAGS.put("034", "Coded Cartographic Mathematical Data (R)");
    TAGS.put("035", "System Control Number (R)");
    TAGS.put("036", UNASSIGNED);
    TAGS.put("039", UNASSIGNED);
    TAGS.put("040", "Cataloging Source (NR)");
    TAGS.put("041", UNASSIGNED);
    TAGS.put("042", "Authentication Code (NR)");
    TAGS.put("043", "Geographic Area Code (NR)");
    TAGS.put("044", UNASSIGNED);
    TAGS.put("045", "Time Period of Heading (NR)");
    TAGS.put("046", "Special Coded Dates (R)");
    TAGS.put("047", UNASSIGNED);
    TAGS.put("049", UNASSIGNED);
    TAGS.put("050", "Library of Congress Call Number (R)");
    TAGS.put("051", UNASSIGNED);
    TAGS.put("052", "Geographic Classification (R)");
    TAGS.put("053", "LC Classification Number (R)");
    TAGS.put("054", UNASSIGNED);
    TAGS.put("055", "Library and Archives Canada Call Number (R)");
    TAGS.put("056", UNASSIGNED);
    TAGS.put("057", UNASSIGNED);
    TAGS.put("058", "LC Classification Number Assigned in Canada]");
    TAGS.put("059", UNASSIGNED);
    TAGS.put("060", "National Library of Medicine Call Number (R)");
    TAGS.put("061", UNASSIGNED);
    TAGS.put("062", UNASSIGNED);
    TAGS.put("063", "NLM Classification Number Assigned by NLM");
    TAGS.put("064", UNASSIGNED);
    TAGS.put("065", "Other Classification Number (R)");
    TAGS.put("066", "Character Sets Present (NR)");
    TAGS.put("067", UNASSIGNED);
    TAGS.put("068", "NLM Classification Number Assigned in Canada");
    TAGS.put("069", UNASSIGNED);
    TAGS.put("070", "National Agricultural Library Call Number (R)");
    TAGS.put("071", UNASSIGNED);
    TAGS.put("072", "Subject Category Code (R)");
    TAGS.put("073", "Subdivision Usage (NR)");
    TAGS.put("074", UNASSIGNED);
    TAGS.put("075", " Type of Entity (R)");
    TAGS.put("076", UNASSIGNED);
    TAGS.put("079", UNASSIGNED);
    TAGS.put("080", "Universal Decimal Classification Number (R)");
    TAGS.put("081", UNASSIGNED);
    TAGS.put("082", "Dewey Decimal Call Number (R)");
    TAGS.put("083", " Dewey Decimal Classification Number (R)");
    TAGS.put("084", UNASSIGNED);
    TAGS.put("085", UNASSIGNED);
    TAGS.put("086", "Government Document Call Number (R)");
    TAGS.put("087", "Government Document Classification Number (R)");
    TAGS.put("088", "Document Shelving Number (CODOC)");
    TAGS.put("089", UNASSIGNED);
    TAGS.put("09X", "Local Call Numbers");
    TAGS.put("100", "Heading - Personal Name (NR)");
    TAGS.put("101", UNASSIGNED);
    TAGS.put("109", UNASSIGNED);
    TAGS.put("110", "Heading - Corporate Name (NR)");
    TAGS.put("111", "Heading - Meeting Name (NR)");
    TAGS.put("112", UNASSIGNED);
    TAGS.put("129", UNASSIGNED);
    TAGS.put("130", "Heading - Uniform Title (NR)");
    TAGS.put("131", UNASSIGNED);
    TAGS.put("139", UNASSIGNED);
    TAGS.put("140", "Uniform Title");
    TAGS.put("141", UNASSIGNED);
    TAGS.put("142", UNASSIGNED);
    TAGS.put("143", "Collective Title");
    TAGS.put("144", UNASSIGNED);
    TAGS.put("146", UNASSIGNED);
    TAGS.put("147", "Heading - Named Event (NR)");
    TAGS.put("148", "Heading - Chronological Term (NR)");
    TAGS.put("149", UNASSIGNED);
    TAGS.put("150", "Heading - Topical Term (NR)");
    TAGS.put("151", "Heading - Geographic Name (NR)");
    TAGS.put("152", UNASSIGNED);
    TAGS.put("154", UNASSIGNED);
    TAGS.put("155", "Heading - Genre/Form Term (NR)");
    TAGS.put("156", UNASSIGNED);
    TAGS.put("161", UNASSIGNED);
    TAGS.put("162", "Heading - Medium of Performance Term (NR)");
    TAGS.put("163", UNASSIGNED);
    TAGS.put("179", UNASSIGNED);
    TAGS.put("180", "Heading - General Subdivision (NR)");
    TAGS.put("181", "Heading - Geographic Subdivision (NR)");
    TAGS.put("182", "Heading - Chronological Subdivision (NR)");
    TAGS.put("183", UNASSIGNED);
    TAGS.put("184", UNASSIGNED);
    TAGS.put("185", " Heading - Form Subdivision (NR)");
    TAGS.put("186", UNASSIGNED);
    TAGS.put("199", UNASSIGNED);
    TAGS.put("200", UNASSIGNED);
    TAGS.put("259", UNASSIGNED);
    TAGS.put("260", "Complex See Reference - Subject (R)");
    TAGS.put("261", UNASSIGNED);
    TAGS.put("299", UNASSIGNED);
    TAGS.put("300", UNASSIGNED);
    TAGS.put("335", UNASSIGNED);
    TAGS.put("336", "Content Type  (R)");
    TAGS.put("337", UNASSIGNED);
    TAGS.put("347", UNASSIGNED);
    TAGS.put("348", "Format of Notated Music (R)");
    TAGS.put("349", UNASSIGNED);
    TAGS.put("359", UNASSIGNED);
    TAGS.put("360", "Complex See Also Reference - Subject (R)");
    TAGS.put("361", UNASSIGNED);
    TAGS.put("367", UNASSIGNED);
    TAGS.put("368", "Other Attributes of Person or Corporate Body (R)");
    TAGS.put("369", UNASSIGNED);
    TAGS.put("370", "Associated Place (R)");
    TAGS.put("371", "Address  (R)");
    TAGS.put("372", "Field of Activity (R)");
    TAGS.put("373", "Associated Group (R)");
    TAGS.put("374", "Occupation (R)");
    TAGS.put("375", "Gender (R)");
    TAGS.put("376", "Family Information (R)");
    TAGS.put("377", "Associated Language (R)");
    TAGS.put("378", "Fuller Form of Personal Name (NR)");
    TAGS.put("379", UNASSIGNED);
    TAGS.put("380", "Form of Work (R)");
    TAGS.put("381", "Other Distinguishing Characteristics of Work or Expression (R)");
    TAGS.put("382", " Medium of Performance (R)");
    TAGS.put("383", "Numeric Designation of Musical Work (R)");
    TAGS.put("384", "Key (NR)");
    TAGS.put("385", "Audience Characteristics (R)");
    TAGS.put("386", "Creator/Contributor Characteristics (R)");
    TAGS.put("387", UNASSIGNED);
    TAGS.put("388", "Time Period of Creation (R)");
    TAGS.put("389", UNASSIGNED);
    TAGS.put("399", UNASSIGNED);
    TAGS.put("400", "See From Tracing - Personal Name (R)");
    TAGS.put("401", UNASSIGNED);
    TAGS.put("409", UNASSIGNED);
    TAGS.put("410", "See From Tracing - Corporate Name (R)");
    TAGS.put("411", "See From Tracing - Meeting Name (R)");
    TAGS.put("412", UNASSIGNED);
    TAGS.put("429", UNASSIGNED);
    TAGS.put("430", "See From Tracing - Uniform Title (R)");
    TAGS.put("431", UNASSIGNED);
    TAGS.put("446", UNASSIGNED);
    TAGS.put("447", "See From Tracing - Named Event (R)");
    TAGS.put("448", "See From Tracing - Chronological Term (R)");
    TAGS.put("449", UNASSIGNED);
    TAGS.put("450", "See From Tracing - Topical Term (R)");
    TAGS.put("451", "See From Tracing - Geographic Name (R)");
    TAGS.put("452", UNASSIGNED);
    TAGS.put("454", UNASSIGNED);
    TAGS.put("455", "See From Tracing - Genre/Form Term (R)");
    TAGS.put("456", UNASSIGNED);
    TAGS.put("461", UNASSIGNED);
    TAGS.put("462", "See From Tracing - Medium of Performance Term (R)");
    TAGS.put("463", UNASSIGNED);
    TAGS.put("479", UNASSIGNED);
    TAGS.put("480", "See From Tracing - General Subdivision (R)");
    TAGS.put("481", "See From Tracing - Geographic Subdivision (R)");
    TAGS.put("482", "See From Tracing - Chronological Subdivision (R)");
    TAGS.put("483", UNASSIGNED);
    TAGS.put("484", UNASSIGNED);
    TAGS.put("485", "See From Tracing - Form Subdivision (R)");
    TAGS.put("486", UNASSIGNED);
    TAGS.put("499", UNASSIGNED);
    TAGS.put("500", "See Also From Tracing - Personal Name (R)");
    TAGS.put("501", UNASSIGNED);
    TAGS.put("509", UNASSIGNED);
    TAGS.put("510", " See Also From Tracing - Corporate Name (R)");
    TAGS.put("511", " See Also From Tracing - Meeting Name (R)");
    TAGS.put("512", UNASSIGNED);
    TAGS.put("529", UNASSIGNED);
    TAGS.put("530", "See Also From Tracing - Uniform Title (R)");
    TAGS.put("531", UNASSIGNED);
    TAGS.put("546", UNASSIGNED);
    TAGS.put("547", "See Also From Tracing - Named Event (R)");
    TAGS.put("548", " See Also From Tracing - Chronological Term (R)");
    TAGS.put("549", UNASSIGNED);
    TAGS.put("550", " See Also From Tracing - Topical Term (R)");
    TAGS.put("551", "See Also From Tracing - Geographic Name (R)");
    TAGS.put("552", UNASSIGNED);
    TAGS.put("554", UNASSIGNED);
    TAGS.put("555", "See Also From Tracing - Genre/Form Term (R)");
    TAGS.put("556", UNASSIGNED);
    TAGS.put("561", UNASSIGNED);
    TAGS.put("562", "See Also From Tracing - Medium of Performance Term (R)");
    TAGS.put("563", UNASSIGNED);
    TAGS.put("579", UNASSIGNED);
    TAGS.put("580", "See Also From Tracing - General Subdivision (R)");
    TAGS.put("581", "See Also From Tracing - Geographic Subdivision (R)");
    TAGS.put("582", "See Also From Tracing - Chronological Subdivision (R)");
    TAGS.put("583", UNASSIGNED);
    TAGS.put("584", UNASSIGNED);
    TAGS.put("585", "See Also From Tracing - Form Subdivision (R)");
    TAGS.put("586", UNASSIGNED);
    TAGS.put("599", UNASSIGNED);
    TAGS.put("600", UNASSIGNED);
    TAGS.put("639", UNASSIGNED);
    TAGS.put("640", "Series Dates of Publication and/or Sequential Designation (R)");
    TAGS.put("641", "Series Numbering Peculiarities (R)");
    TAGS.put("642", "Series Numbering Example (R)");
    TAGS.put("643", "Series Place and Publisher/Issuing Body (R)");
    TAGS.put("644", "Series Analysis Practice (R)");
    TAGS.put("645", "Series Tracing Practice (R)");
    TAGS.put("646", "Series Classification Practice (R)");
    TAGS.put("647", UNASSIGNED);
    TAGS.put("649", UNASSIGNED);
    TAGS.put("650", UNASSIGNED);
    TAGS.put("662", UNASSIGNED);
    TAGS.put("663", "Complex See Also Reference - Name (NR)");
    TAGS.put("664", "Complex See Reference - Name (NR)");
    TAGS.put("665", "History Reference (NR)");
    TAGS.put("666", "General Explanatory Reference - Name (NR)");
    TAGS.put("667", "Nonpublic General Note (R)");
    TAGS.put("668", "Note - Characters in Nonroman Alphabets");
    TAGS.put("669", UNASSIGNED);
    TAGS.put("670", "Source Data Found (R)");
    TAGS.put("671", "Note - Work Catalogued (Names/Titles)");
    TAGS.put("672", "Title Related to the Entity (R)");
    TAGS.put("673", "Title Not Related to the Entity (R)");
    TAGS.put("674", UNASSIGNED);
    TAGS.put("675", "Source Data Not Found (NR)");
    TAGS.put("676", "Note - Cataloging Rules (Names/Titles)");
    TAGS.put("677", "Definition  (R)");
    TAGS.put("678", "Biographical or Historical Data (R)");
    TAGS.put("679", UNASSIGNED);
    TAGS.put("680", "Public General Note (R)");
    TAGS.put("681", "Subject Example Tracing Note (R)");
    TAGS.put("682", "Deleted Heading Information (NR)");
    TAGS.put("683", UNASSIGNED);
    TAGS.put("684", UNASSIGNED);
    TAGS.put("685", "Note - Source Data Found (Subjects)");
    TAGS.put("686", "Note - Source Data Not Found (Subjects)");
    TAGS.put("687", "Note - Usage (Subjects)");
    TAGS.put("688", "Application History Note (R)");
    TAGS.put("689", UNASSIGNED);
    TAGS.put("699", UNASSIGNED);
    TAGS.put("700", "Established Heading Linking Entry - Personal Name (R)");
    TAGS.put("701", UNASSIGNED);
    TAGS.put("709", UNASSIGNED);
    TAGS.put("710", "Established Heading Linking Entry - Corporate Name (R)");
    TAGS.put("711", "Established Heading Linking Entry - Meeting Name (R)");
    TAGS.put("712", UNASSIGNED);
    TAGS.put("729", UNASSIGNED);
    TAGS.put("730", "Established Heading Linking Entry - Uniform Title (R)");
    TAGS.put("731", UNASSIGNED);
    TAGS.put("746", UNASSIGNED);
    TAGS.put("747", "Established Heading Linking Entry - Named Event (R)");
    TAGS.put("748", "Established Heading Linking Entry - Chronological Term (R)");
    TAGS.put("749", UNASSIGNED);
    TAGS.put("750", "Established Heading Linking Entry - Topical Term (R)");
    TAGS.put("751", "Established Heading Linking Entry - Geographic Name (R)");
    TAGS.put("752", UNASSIGNED);
    TAGS.put("754", UNASSIGNED);
    TAGS.put("755", "Established Heading Linking Entry - Genre/Form Term (R)");
    TAGS.put("756", UNASSIGNED);
    TAGS.put("761", UNASSIGNED);
    TAGS.put("762", "Established Heading Linking Entry - Medium of Performance Term (R)");
    TAGS.put("763", UNASSIGNED);
    TAGS.put("779", UNASSIGNED);
    TAGS.put("780", "Subdivision Linking Entry - General Subdivision (R)");
    TAGS.put("781", "Subdivision Linking Entry - Geographic Subdivision (R)");
    TAGS.put("782", "Subdivision Linking Entry - Chronological Subdivision (R)");
    TAGS.put("783", UNASSIGNED);
    TAGS.put("784", UNASSIGNED);
    TAGS.put("785", "Subdivision Linking Entry - Form Subdivision (R)");
    TAGS.put("786", UNASSIGNED);
    TAGS.put("787", UNASSIGNED);
    TAGS.put("788", "Complex Linking Entry Data (NR)");
    TAGS.put("789", UNASSIGNED);
    TAGS.put("799", UNASSIGNED);
    TAGS.put("800", UNASSIGNED);
    TAGS.put("855", UNASSIGNED);
    TAGS.put("856", "Electronic Location and Access (R)");
    TAGS.put("857", UNASSIGNED);
    TAGS.put("879", UNASSIGNED);
    TAGS.put("880", "Alternate Graphic Representation (R)");
    TAGS.put("881", UNASSIGNED);
    TAGS.put("882", UNASSIGNED);
    TAGS.put("883", "Machine-generated Metadata Provenance (R)");
    TAGS.put("884", "Description Conversion Information (R)");
    TAGS.put("885", "Matching Information (R)");
    TAGS.put("886", UNASSIGNED);
    TAGS.put("899", UNASSIGNED);
    TAGS.put(TAG_9XX, "Local Implementation");
    TAGS.put("9XX", "Equivalent Headings");
  }

  static {
    ERRORS_MAP.put(ERROR_MANDATORY_TAG, "Check mandatory TAGS failure.");
    ERRORS_MAP.put(ERROR_DUPLICATE_TAG, "Duplicate TAGS for : %s");
    ERRORS_MAP.put(ERROR_EMPTY_TAG, "Some TAGS appears empties: %s.");
    ERRORS_MAP.put(NO_RECORD_FOUND, "Record not found: %d.");
    ERRORS_MAP.put(NO_TAG_FOUND, "Tag %s not found");
  }

  static {
    PHYSICAL_TYPES_MAP.put(23, GLOBE);
    PHYSICAL_TYPES_MAP.put(24, MAP_CODE);
    PHYSICAL_TYPES_MAP.put(25, MICROFORM);
    PHYSICAL_TYPES_MAP.put(26, MOTION_PICTURE);
    PHYSICAL_TYPES_MAP.put(27, NON_PROJECTED_GRAPHIC);
    PHYSICAL_TYPES_MAP.put(28, PROJECTED_GRAPHIC);
    PHYSICAL_TYPES_MAP.put(29, SOUND_RECORDING);
    PHYSICAL_TYPES_MAP.put(30, VIDEO_RECORDING);
    PHYSICAL_TYPES_MAP.put(42, ELECTRONIC_RESOURCE);
    PHYSICAL_TYPES_MAP.put(43, REMOTE_SENSING_IMAGE);
    PHYSICAL_TYPES_MAP.put(44, TEXT_CODE);
    PHYSICAL_TYPES_MAP.put(45, UNSPECIFIED);
    PHYSICAL_TYPES_MAP.put(46, TACTILE_MATERIAL);
    PHYSICAL_TYPES_MAP.put(47, KIT_CODE);
    PHYSICAL_TYPES_MAP.put(48, NOTATED_MUSIC);
  }

  static {
    MAP_CODE_LISTS.put("BOOK_MATERIAL_CODE", T_BOOK_TYP_CDE.class);
    MAP_CODE_LISTS.put("MUSIC_MATERIAL_CODE", T_MSC_TYP_CDE.class);
    MAP_CODE_LISTS.put("MAP_MATERIAL_CODE", T_CRTGC_TYP_CDE.class);
    MAP_CODE_LISTS.put("VM_MATERIAL_CODE", T_VSL_TYP_CDE.class);
    MAP_CODE_LISTS.put("DATE_TYPE", T_ITM_DTE_TYP.class);
    MAP_CODE_LISTS.put("MODIFIED_RECORD_TYPE", T_REC_MDFTN.class);
    MAP_CODE_LISTS.put("CATALOGUING_SOURCE", T_REC_CTLGG_SRC.class);
    MAP_CODE_LISTS.put("BOOK_ILLUSTRATION", T_BOOK_ILSTN.class);
    MAP_CODE_LISTS.put("TARGET_AUDIENCE", T_TRGT_AUDNC.class);
    MAP_CODE_LISTS.put("FORM_OF_ITEM", T_FORM_OF_ITM.class);
    MAP_CODE_LISTS.put("NATURE_OF_CONTENT", T_NTR_OF_CNTNT.class);
    MAP_CODE_LISTS.put("GOV_PUBLICATION", T_GOVT_PBLTN.class);
    MAP_CODE_LISTS.put("CONF_PUBLICATION", T_CONF_PBLTN.class);
    MAP_CODE_LISTS.put("BOOK_FESTSCHRIFT", T_BOOK_FTSCT.class);
    MAP_CODE_LISTS.put("BOOK_INDEX", T_BOOK_IDX_AVBTY.class);
    MAP_CODE_LISTS.put("BOOK_LITERARY_FORM", T_BOOK_LTRY_FORM_TYP.class);
    MAP_CODE_LISTS.put("BOOK_BIOGRAPHY", T_BOOK_BGPHY.class);
    MAP_CODE_LISTS.put("MSC_FORM_OF_COMPOSITION", T_MSC_FORM_OR_TYP.class);
    MAP_CODE_LISTS.put("MSC_FORMAT", T_MSC_FRMT.class);
    MAP_CODE_LISTS.put("MSC_PARTS", T_MSC_PRT.class);
    MAP_CODE_LISTS.put("MSC_TEXTUAL_MAT_CODE", T_MSC_TXTL_MTR.class);
    MAP_CODE_LISTS.put("MSC_LITERARY_TEXT", T_MSC_LTRY_TXT.class);
    MAP_CODE_LISTS.put("MSC_TRANSPOSITION_CODE", T_MSC_TRNSPSN_ARRNGMNT.class);
    MAP_CODE_LISTS.put("SRL_FREQUENCY", T_SRL_FREQ.class);
    MAP_CODE_LISTS.put("SRL_REGULARITY", T_SRL_REGTY.class);
    MAP_CODE_LISTS.put("SRL_TYPE_CONTINUING_RESOURCE", T_SRL_TYP.class);
    MAP_CODE_LISTS.put("SRL_FORM_ORGNL_ITEM", T_SRL_FORM_ORGNL_ITM.class);
    MAP_CODE_LISTS.put("SRL_NATURE_OF_WORK", T_NTR_OF_CNTNT.class);
    MAP_CODE_LISTS.put("SRL_ORIGIN_ALPHABET", T_SRL_TTL_ALPBT.class);
    MAP_CODE_LISTS.put("SRL_ENTRY_CONVENTION", T_SRL_SCSV_LTST.class);
    MAP_CODE_LISTS.put("MAP_RELIEF", T_CRTGC_RLF.class);
    MAP_CODE_LISTS.put("MAP_PROJECTION", T_CRTGC_PRJTN.class);
    MAP_CODE_LISTS.put("MAP_TYPE_MATERIAL", T_CRTGC_MTRL.class);
    MAP_CODE_LISTS.put("MAP_INDEX", T_CRTGC_IDX_AVBTY.class);
    MAP_CODE_LISTS.put("MAP_SPECIAL_FORMAT_CHARACTERISTIC", T_CRTGC_FRMT.class);
    MAP_CODE_LISTS.put("VSL_TARGET_AUDIENCE", T_VSL_TRGT_AUDNC.class);
    MAP_CODE_LISTS.put("VSL_TYPE_MATERIAL", T_VSL_MTRL_TYP.class);
    MAP_CODE_LISTS.put("VSL_TECHNIQUE", T_VSL_TECH.class);
    MAP_CODE_LISTS.put("COMPUTER_TARGET_AUDIENCE", T_CMPTR_TRGT_AUDNC.class);
    MAP_CODE_LISTS.put("COMPUTER_FORM_OF_ITEM", T_CF_FORM_OF_ITM.class);
    MAP_CODE_LISTS.put("COMPUTER_TYPE_MATERIAL", T_CMPTR_FIL_TYP.class);
    MAP_CODE_LISTS.put("MARC_COUNTRY", T_MARC_CNTRY.class);
    MAP_CODE_LISTS.put("LANGUAGE", T_LANG.class);
    //007
    MAP_CODE_LISTS.put("CATEGORY_MATERIAL", GeneralMaterialDesignation.class);
    MAP_CODE_LISTS.put("SOUND_MEDIUM_OR_SEP", T_SND_MDM_OR_SEPRT.class);
    MAP_CODE_LISTS.put("MEDIUM_FOR_SOUND", T_MDM_FOR_SND.class);
    MAP_CODE_LISTS.put("MAP_SPEC_DESIGN", T_MAP_SMD.class);
    MAP_CODE_LISTS.put("MAP_COLOR", T_MAP_CLR.class);
    MAP_CODE_LISTS.put("MAP_PHYSICAL_MEDIUM", T_MAP_PHSCL_MDM.class);
    MAP_CODE_LISTS.put("MAP_TYPE_OF_REPRODUCTION", T_MAP_RPRDT_TYP.class);
    MAP_CODE_LISTS.put("MAP_PRODUCTION_DETAILS", T_MAP_PRDTN_DTL.class);
    MAP_CODE_LISTS.put("MAP_POLARITY", T_MAP_PLRTY.class);
    MAP_CODE_LISTS.put("CF_SPEC_DESIGN", T_CF_SMD.class);
    MAP_CODE_LISTS.put("CF_COLOR", T_CF_CLR.class);
    MAP_CODE_LISTS.put("CF_DIMENSIONS", T_CF_DMNSN.class);
    MAP_CODE_LISTS.put("CF_FILE_FORMAT", T_CF_FF.class);
    MAP_CODE_LISTS.put("CF_QUALITY_ASS", T_CF_QAT.class);
    MAP_CODE_LISTS.put("CF_ANTECEDENT_SRC", T_CF_ANTSRC.class);
    MAP_CODE_LISTS.put("CF_COMPRESSION_LVL", T_CF_LOC.class);
    MAP_CODE_LISTS.put("CF_REFORMATTING_QUALITY", T_CF_RQ.class);
    MAP_CODE_LISTS.put("GLB_SPEC_DESIGN", T_GLB_SMD.class);
    MAP_CODE_LISTS.put("GLB_COLOR", T_GLB_CLR.class);
    MAP_CODE_LISTS.put("GLB_PHYSICAL_MEDIUM", T_GLB_PHSCL_MDM.class);
    MAP_CODE_LISTS.put("GLB_TYPE_OF_REPRODUCTION", T_GLB_RPDTN_TYP.class);
    MAP_CODE_LISTS.put("TCT_SPEC_DESIGN", T_TM_SMD.class);
    MAP_CODE_LISTS.put("TCT_CLASS_BRAILLE_WRITING", T_TM_CBW.class);
    MAP_CODE_LISTS.put("TCT_CONTRACTION_LVL", T_TM_LC.class);
    MAP_CODE_LISTS.put("TCT_BRAILLE_MUSIC_FORMAT", T_TM_BMF.class);
    MAP_CODE_LISTS.put("TCT_SPECIAL_PHYSICAL_CHAR", T_TM_SPC.class);
    MAP_CODE_LISTS.put("PG_SPEC_DESIGN", T_PG_SMD.class);
    MAP_CODE_LISTS.put("PG_COLOR", T_PG_CLR.class);
    MAP_CODE_LISTS.put("PG_EMUL_BASE", T_PG_BSE_OF_EMLSN_MTRL.class);
    MAP_CODE_LISTS.put("PG_DIMENSIONS", T_PG_DMNSN.class);
    MAP_CODE_LISTS.put("PG_SECONDARY_SUPPORT", T_PG_SCDRY_SPRT_MTRL.class);
    MAP_CODE_LISTS.put("NPG_SPEC_DESIGN", T_NPG_SMD.class);
    MAP_CODE_LISTS.put("NPG_COLOR", T_NPG_CLR.class);
    MAP_CODE_LISTS.put("NPG_PRIMARY_SUPPORT", T_NPG_PRMRY_SPRT_MTRL.class);
    MAP_CODE_LISTS.put("NPG_SECONDARY_SUPPORT", T_NPG_SCDRY_SPRT_MTRL.class);
    MAP_CODE_LISTS.put("MP_SPEC_DESIGN", T_MP_SMD.class);
    MAP_CODE_LISTS.put("MP_COLOR", T_MP_CLR.class);
    MAP_CODE_LISTS.put("MP_PRESENT_FORMAT", T_MP_PRSTN_FRMT.class);
    MAP_CODE_LISTS.put("MP_DIMENSIONS", T_MP_DMNSN.class);
    MAP_CODE_LISTS.put("MP_CONF_PLAYBACK", T_MP_CONFIG.class);
    MAP_CODE_LISTS.put("MP_PROD_ELEM", T_MP_PROD_ELEM.class);
    MAP_CODE_LISTS.put("MP_POLARITY", T_MP_POS_NEG.class);
    MAP_CODE_LISTS.put("MP_GENERATION", T_MP_GNRTN.class);
    MAP_CODE_LISTS.put("MP_BASE_FILM", T_MP_BSE_FLM.class);
    MAP_CODE_LISTS.put("MP_REFINE_CAT_COLOR", T_MP_RF_CLR.class);
    MAP_CODE_LISTS.put("MP_KIND_COLORS", T_MP_CLR_STCK.class);
    MAP_CODE_LISTS.put("MP_DETERIORATION_STAGE", T_MP_DTRTN_STGE.class);
    MAP_CODE_LISTS.put("MP_COMPLETENESS", T_MP_CMPLT.class);
    MAP_CODE_LISTS.put("KIT_SPEC_DESIGN", T_KIT_SMD.class);
    MAP_CODE_LISTS.put("NMU_SPEC_DESIGN", T_NM_SMD.class);
    MAP_CODE_LISTS.put("TXT_SPEC_DESIGN", T_TXT_SMD.class);
    MAP_CODE_LISTS.put("UNS_SPEC_DESIGN", T_USP_SMD.class);
    MAP_CODE_LISTS.put("RSI_SPEC_DESIGN", T_RSI_SMD.class);
    MAP_CODE_LISTS.put("RSI_ALTITUDE", T_RSI_ALT_SENS.class);
    MAP_CODE_LISTS.put("RSI_ATTITUDE", T_RSI_ATT_SENS.class);
    MAP_CODE_LISTS.put("RSI_CLOUD_COVER", T_RSI_CLD_CVR.class);
    MAP_CODE_LISTS.put("RSI_PLAT_CONSTRUCTION", T_RSI_PLTFRM_CNSTRCT.class);
    MAP_CODE_LISTS.put("RSI_PLAT_USE", T_RSI_PLTFRM_USE.class);
    MAP_CODE_LISTS.put("RSI_SENSOR_TYPE", T_RSI_SNSR_TPE.class);
    MAP_CODE_LISTS.put("RSI_DATA_TYPE", T_RSI_DATA_TPE.class);
    MAP_CODE_LISTS.put("SND_SPEC_DESIGN", T_SND_SMD.class);
    MAP_CODE_LISTS.put("SND_SPEED", T_SND_SPD.class);
    MAP_CODE_LISTS.put("SND_CONF_PLAYBACK", T_SND_PLYBC_CHNL_CFGTN.class);
    MAP_CODE_LISTS.put("SND_GROOVE_WIDTH", T_SND_DISC_GRV_WDTH.class);
    MAP_CODE_LISTS.put("SND_DIMENSIONS", T_SND_DMNSN.class);
    MAP_CODE_LISTS.put("SND_TAPE_WIDTH", T_SND_TAPE_WDTH.class);
    MAP_CODE_LISTS.put("SND_TAPE_CONF", T_SND_TAPE_CFGTN.class);
    MAP_CODE_LISTS.put("SND_DISC_TYPE", T_SND_DISC_CYLND_TYP.class);
    MAP_CODE_LISTS.put("SND_MATERIAL_TYPE", T_SND_MTRL_TYP.class);
    MAP_CODE_LISTS.put("SND_CUTTING", T_SND_DISC_CTG.class);
    MAP_CODE_LISTS.put("SND_SPEC_PLAYBACK", T_SND_SPCL_PLYBC_CHAR.class);
    MAP_CODE_LISTS.put("SND_STORAGE_TECNIQUE", T_SND_STRG_TECH.class);
    MAP_CODE_LISTS.put("VR_SPEC_DESIGN", T_VR_SMD.class);
    MAP_CODE_LISTS.put("VR_COLOR", T_VR_CLR.class);
    MAP_CODE_LISTS.put("VR_FORMAT", T_VR_FRMT.class);
    MAP_CODE_LISTS.put("VR_DIMENSIONS", T_VR_DMNSN.class);
    MAP_CODE_LISTS.put("VR_CONF_PLAYBACK", T_VR_PLYBC_CHNL_CFGTN.class);
    MAP_CODE_LISTS.put("MIC_COLOR", T_MIC_CLR.class);
    MAP_CODE_LISTS.put("MIC_DIMENSIONS", T_MIC_DMNSN.class);
    MAP_CODE_LISTS.put("MIC_BASE_FILM", T_MIC_FLM_BSE.class);
    MAP_CODE_LISTS.put("MIC_EMUL_FILM", T_MIC_FLM_EMLSN.class);
    MAP_CODE_LISTS.put("MIC_GENERATION", T_MIC_GNRTN.class);
    MAP_CODE_LISTS.put("MIC_POLARITY", T_MIC_PLRTY.class);
    MAP_CODE_LISTS.put("MIC_REDUCT_RATIO_RANGE", T_MIC_RDCTN_RATIO_RNG.class);
    MAP_CODE_LISTS.put("MIC_SPEC_DESIGN", T_MIC_SMD.class);
  }

  static {
    BIBLIOGRAPHIC_ACCESS_POINT_CLASS_MAP.put("NH", NameAccessPoint.class);
    BIBLIOGRAPHIC_ACCESS_POINT_CLASS_MAP.put("TH", TitleAccessPoint.class);
    BIBLIOGRAPHIC_ACCESS_POINT_CLASS_MAP.put("SH", SubjectAccessPoint.class);
    BIBLIOGRAPHIC_ACCESS_POINT_CLASS_MAP.put("MH", NameTitleAccessPoint.class);
  }

  static {
    INDEX_AUTHORITY_TYPE_MAP.put("NH", "NK");
    INDEX_AUTHORITY_TYPE_MAP.put("TH", "TK");
    INDEX_AUTHORITY_TYPE_MAP.put("SH", "SK");
    INDEX_AUTHORITY_TYPE_MAP.put("MH", "NTK");
  }

  static {
    DAO_CLASS_MAP.put("2P0", NameDescriptorDAO.class);
    DAO_CLASS_MAP.put("3P10", NameDescriptorDAO.class);
    DAO_CLASS_MAP.put("4P10", NameDescriptorDAO.class);
    DAO_CLASS_MAP.put("5P10", NameDescriptorDAO.class);
    DAO_CLASS_MAP.put("7P0", TitleDescriptorDAO.class);
    DAO_CLASS_MAP.put("9P0", SubjectDescriptorDAO.class);
    DAO_CLASS_MAP.put("230P", PublisherNameDescriptorDAO.class);
    DAO_CLASS_MAP.put("243P", PublisherPlaceDescriptorDAO.class);
    DAO_CLASS_MAP.put("250S", NameTitleNameDescriptorDAO.class);
    DAO_CLASS_MAP.put("251S", NameTitleTitleDescriptorDAO.class);
    DAO_CLASS_MAP.put("16P30", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("18P2", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("19P2", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("20P3", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("21P2", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("22P10", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("29P20", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("30P4", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("31P3", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("32P3", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("33P3", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("34P20", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("35P20", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("36P20", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("51P3", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("52P3", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("53P3", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("54P3", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("55P3", ControlNumberDescriptorDAO.class);
    DAO_CLASS_MAP.put("47P40", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("24P5", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("25P5", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("27P5", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("23P5", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("48P3", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("46P40", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("50P3", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("49P3", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("326P1", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("353P1", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("303P3", ClassificationDescriptorDAO.class);
    DAO_CLASS_MAP.put("28P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("244P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("47P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("37P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("38P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("39P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("41P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("42P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("43P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("44P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("45P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("46P30", ShelfListDAO.class);
    DAO_CLASS_MAP.put("373P0", SubjectDescriptorDAO.class);
  }

  static {
    FILTER_MAP.put("2P0", "");
    FILTER_MAP.put("3P10", " and hdg.typeCode = 2 ");
    FILTER_MAP.put("4P10", " and hdg.typeCode = 3 ");
    FILTER_MAP.put("5P10", " and hdg.typeCode = 4 ");
    FILTER_MAP.put("7P0", "");
    FILTER_MAP.put("9P0", "");
    FILTER_MAP.put("230P", "");
    FILTER_MAP.put("243P", "");
    FILTER_MAP.put("250S", "");
    FILTER_MAP.put("251S", "");
    FILTER_MAP.put("16P30", "");
    FILTER_MAP.put("18P2", " and hdg.typeCode = 9 ");
    FILTER_MAP.put("19P2", " and hdg.typeCode = 10 ");
    FILTER_MAP.put("20P3", " and hdg.typeCode = 93 ");
    FILTER_MAP.put("21P2", " and hdg.typeCode = 2 ");
    FILTER_MAP.put("22P10", " and hdg.typeCode = 93 ");
    FILTER_MAP.put("29P20", " and hdg.typeCode = 71 ");
    FILTER_MAP.put("30P4", "");
    FILTER_MAP.put("31P3", " and hdg.typeCode = 84 ");
    FILTER_MAP.put("32P3", " and hdg.typeCode = 88 ");
    FILTER_MAP.put("33P3", " and hdg.typeCode = 90 ");
    FILTER_MAP.put("34P20", "");
    FILTER_MAP.put("35P20", "");
    FILTER_MAP.put("36P20", " and hdg.typeCode = 52 ");
    FILTER_MAP.put("51P3", " and hdg.typeCode = 89 ");
    FILTER_MAP.put("52P3", " and hdg.typeCode = 83 ");
    FILTER_MAP.put("53P3", " and hdg.typeCode = 91 ");
    FILTER_MAP.put("54P3", " and hdg.typeCode = 97 ");
    FILTER_MAP.put("55P3", " and hdg.typeCode = 98 ");
    FILTER_MAP.put("47P40", " and hdg.typeCode = 21");
    FILTER_MAP.put("24P5", " and hdg.typeCode = 12");
    FILTER_MAP.put("25P5", " and hdg.typeCode = 1");
    FILTER_MAP.put("27P5", " and hdg.typeCode = 6");
    FILTER_MAP.put("23P5", " and hdg.typeCode not in (1,6,10,11,12,14,15,29) ");
    FILTER_MAP.put("48P3", " and hdg.typeCode = 10");
    FILTER_MAP.put("46P40", " and hdg.typeCode = 11");
    FILTER_MAP.put("50P3", " and hdg.typeCode = 14");
    FILTER_MAP.put("49P3", " and hdg.typeCode = 15");
    FILTER_MAP.put("326P1", " and hdg.typeCode = 29");
    FILTER_MAP.put("28P30", " and hdg.typeCode = '@'");
    FILTER_MAP.put("244P30", " and hdg.typeCode = 'N'");
    FILTER_MAP.put("47P30", " and hdg.typeCode = 'M'");
    FILTER_MAP.put("37P30", " and hdg.typeCode = '2'");
    FILTER_MAP.put("38P30", " and hdg.typeCode = '3'");
    FILTER_MAP.put("39P30", " and hdg.typeCode = '4'");
    FILTER_MAP.put("41P30", " and hdg.typeCode = '6'");
    FILTER_MAP.put("42P30", " and hdg.typeCode = 'A'");
    FILTER_MAP.put("43P30", " and hdg.typeCode = 'C'");
    FILTER_MAP.put("44P30", " and hdg.typeCode = 'E'");
    FILTER_MAP.put("45P30", " and hdg.typeCode = 'F'");
    FILTER_MAP.put("46P30", " and hdg.typeCode = 'Global'");
    FILTER_MAP.put("303P3", " and hdg.typeCode = 13");
    FILTER_MAP.put("354P0", "");
    FILTER_MAP.put("353P1", " and hdg.typeCode = 80");
    FILTER_MAP.put("373P0", " and hdg.sourceCode = 4 ");
  }

  static {
    HCONFIGURATION.setProperty("hibernate.dialect", "net.sf.hibernate.dialect.PostgreSQLDialect");
    HCONFIGURATION.setProperty("dialect", "net.sf.hibernate.dialect.PostgreSQLDialect");
    HCONFIGURATION.setProperty("show_sql", System.getProperty("show.sql", "false"));
    try {
      HCONFIGURATION.configure("/hibernate.cfg.xml");
    } catch (final Exception failure) {
      throw new ExceptionInInitializerError(failure);
    }
  }

  private Global() {
    throw new IllegalStateException("Global class");
  }
}
